version: 0.2

# Pre-requisites
# - Create CodeBuild project
#   - Provide minimal github credentials to access public repo
# test

phases:
  install:
    runtime-versions:
      java: corretto21
    commands:
    - python3 -m pip install --upgrade pip
    - pip install yq

  pre_build:
    on-failure: ABORT
    commands:
    - cp settings.xml ~/.m2/
    - export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain cdlib-uc3-mrt --domain-owner $AWS_ACCOUNT_ID --region $AWS_REGION --query authorizationToken --output text`
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${ECR_REGISTRY}

    - COMMIT=`git rev-parse --short HEAD`
    - # Get semantic tags for commit otherwise get all tags for commit, sort and choose the last value
    - TAG=`(git tag --contains $COMMIT | egrep "^[0-9]+\.[0-9]+\.[0-9]+$" || git tag --contains $COMMIT || echo '') | sort | tail -1`
    - |
      if [[ "$MODE" == "OnPush" ]]
      then
        # Get Tag || Get Branch || Alternate Branch Lookup || Get Committ
        BRANCHTAG=`echo $TAG | grep . || git symbolic-ref -q --short HEAD || git name-rev $(git rev-parse --short HEAD) | cut -d' ' -f2 || git rev-parse --short HEAD`
      else
        BRANCHTAG=$BRANCHNAME
      fi
    - COMMITDATE=`git --no-pager log -1 --pretty='format:%cd' --date='format:%Y-%m-%d %H:%M:%S'`
    - echo "Branchtag ${BRANCHTAG}; COMMITDATE=${COMMITDATE}; REPONAME=${REPONAME}; BRANCHNAME=${BRANCHNAME}"
    - BUILDDATE=$(TZ='America/Los_Angeles' date +"%Y%m%d-%H%M%S")
    - echo "BUILDDATE=$BUILDDATE"

    - |
      DEVBUCK=$(aws ssm get-parameter --name /uc3/mrt/config-bucket-dev --query Parameter.Value --output text)
      aws s3 cp s3://${DEVBUCK}/uc3/mrt/mrt-ecs-manifest/ecs-release-manifest.yaml /tmp/ecs-release-manifest.yaml
      TAG_ECS_DEV=$(yq -r ".\"ecs-tagmap\".\"${REPONAME}\".\"ecs-dev\"" /tmp/ecs-release-manifest.yaml)
      echo TAG_ECS_DEV=$TAG_ECS_DEV
      TAG_ECS_EPHEMERAL=$(yq -r ".\"ecs-tagmap\".\"${REPONAME}\".\"ecs-ephemeral\"" /tmp/ecs-release-manifest.yaml)
      echo TAG_ECS_EPHEMERAL=$TAG_ECS_EPHEMERAL
      TAG_ECS_STG=$(yq -r ".\"ecs-tagmap\".\"${REPONAME}\".\"ecs-stg\"" /tmp/ecs-release-manifest.yaml)
      echo TAG_ECS_STG=$TAG_ECS_STG
      TAG_ECS_PRD=$(yq -r ".\"ecs-tagmap\".\"${REPONAME}\".\"ecs-prd\"" /tmp/ecs-release-manifest.yaml)
      echo TAG_ECS_PRD=$TAG_ECS_PRD

  build:
    on-failure: ABORT
    commands:
    # - mvn -ntp clean install -Ddocker.skip -DskipITs -Dmaven.test.skip=true
    - mvn -ntp clean install
    - |
      if [[ "${BRANCHTAG}" == "main" ]]
      then
        SEMVER=''
      elif [[ "${TAG}" == "" ]]
      then
        SEMVER="-Dversion=${BRANCHTAG}-SNAPSHOT"
      else
        SEMVER="-Dversion=${BRANCHTAG}"
      fi
    - echo "Semver [${SEMVER}]"

    - mkdir -p /build/static
    - |
      echo "build_tag: ${BRANCHTAG}" > /build/static/build.content.txt 
    - ${JAVA_HOME}/bin/jar uf $(ls replication-war/target/mrt-replicationwar-*.war) -C /build static/build.content.txt

    - |
      SERVICENAME=replic
      mvn -ntp deploy:deploy-file \
        -Durl=${CODEARTIFACT_URL} \
        -DrepositoryId=cdlib-uc3-mrt-uc3-mrt-java \
        -Dfile=$(ls replication-war/target/mrt-replicationwar-*.war) ${SEMVER}

    - |
        docker build --push --quiet \
        --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
        -t ${ECR_REGISTRY}/${REPONAME}:${BRANCHTAG} .

    - |
      if [[ "$BRANCHTAG" == "$TAG_ECS_DEV" ]]
      then
        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/${REPONAME}:ecs-dev .
  
        RUNNING_COUNT=$(aws ecs list-tasks \
          --cluster mrt-ecs-dev-stack \
          --service-name $SERVICENAME \
          --desired-status RUNNING \
          --query 'length(taskArns)' \
          --output text)

        echo "RUNNING_COUNT for ecs-dev: $RUNNING_COUNT"

        if [ $RUNNING_COUNT -gt 0 ]
        then
          aws ecs update-service --cluster mrt-ecs-dev-stack --service $SERVICENAME \
            --desired-count $RUNNING_COUNT --output text --no-cli-pager \
            --query "service.deployments[0].[id,taskDefinition,status,desiredCount,createdAt]" \
            --force-new-deployment || echo "Skip ecs-dev Deployment"
        fi  
      fi

      if [[ "$BRANCHTAG" == "$TAG_ECS_EPHEMERAL" ]]
      then
        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/${REPONAME}:ecs-ephemeral .

        RUNNING_COUNT=$(aws ecs list-tasks \
          --cluster mrt-ecs-ephemeral-stack \
          --service-name $SERVICENAME \
          --desired-status RUNNING \
          --query 'length(taskArns)' \
          --output text)

        echo "RUNNING_COUNT for ecs-dev: $RUNNING_COUNT"

        if [ $RUNNING_COUNT -gt 0 ]
        then
          aws ecs update-service --cluster mrt-ecs-ephemeral-stack --service $SERVICENAME \
            --desired-count $RUNNING_COUNT --output text --no-cli-pager \
            --query "service.deployments[0].[id,taskDefinition,status,desiredCount,createdAt]" \
            --force-new-deployment || echo "Skip ecs-ephemeral Deployment"
        fi  
      fi

      if [[ "$BRANCHTAG" == "$TAG_ECS_STG" ]]
      then
        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/${REPONAME}:ecs-stg .

        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/${REPONAME}:archive-ecs-stg-${BRANCHTAG}-${BUILDDATE} .
      fi

      if [[ "$BRANCHTAG" == "$TAG_ECS_PRD" ]]
      then
        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/${REPONAME}:ecs-prd .

        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/${REPONAME}:archive-ecs-prd-${BRANCHTAG}-${BUILDDATE} .
      fi

    - |
      for pkg in mrt-replicationwar
      do
        for ver in `aws codeartifact list-package-versions \
          --domain=cdlib-uc3-mrt --repository=uc3-mrt-java \
          --format=maven --namespace=org.cdlib.mrt \
          --package=$pkg --status=Unlisted \
          --output=text | grep Unlisted | cut -f4`
        do
          aws codeartifact delete-package-versions \
            --domain=cdlib-uc3-mrt --repository=uc3-mrt-java \
            --format=maven --namespace=org.cdlib.mrt \
            --package=$pkg --versions=$ver --no-cli-pager
        done
      done

    - |
      # daily / on-demand rebuild of deployed images
      # note that this also applied to a main branch build
      if [[ "$MODE" == "OnDemand" ]]
      then
        for stack in ecs-dev ecs-ephemeral ecs-stg ecs-prd
        do
          TAG_ECS=$(yq -r ".\"ecs-tagmap\".\"${REPONAME}\".\"$stack\"" /tmp/ecs-release-manifest.yaml)
          if [[ "$TAG_ECS" == "null" ]]
          then
            echo "${TAG_ECS} undefined for ${stack}"
          elif [[ "$BRANCHTAG" == "$TAG_ECS" ]]
          then
            echo "${TAG_ECS} Already Built for ${stack}"
          else
            # perform get checkout get the specific dockerfile
            git checkout $TAG_ECS

            #mkdir -p replication-war/target

            # this command will succeed if TAG_ECS is a valid tag
            mvn dependency:copy \
              -DrepoUrl=${CODEARTIFACT_URL} \
              -Dartifact=org.cdlib.mrt:mrt-replicationwar:${TAG_ECS}:war \
              -DoutputDirectory=replication-war/target \
              -Dtransitive=false
            
            # if TAG_ECS is a branch, then rebuild the war
            if [[ $? -ne 0 ]]
            then
              mvn -ntp clean install -Ddocker.skip -DskipITs -Dmaven.test.skip=true              
            fi

            if [[ $? -eq 0 ]]
            then
              docker build --quiet --push \
                --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
                -t ${ECR_REGISTRY}/${REPONAME}:$stack .

              case "$stack" in
                ecs-stg|ecs-prd)
                  pushed=$(date -d $(aws ecr describe-images --repository-name ${REPONAME} \
                    --image-ids imageTag=$stack 
                    --query "imageDetails[0].imagePushedAt" --output text) +%s || echo 0)
                  current=$(date +%s)

                  # do not archive more than once per hour
                  if [[ $current -gt $(($pushed + 3600)) ]]
                  then
                    docker build --quiet --push \
                      --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
                      -t ${ECR_REGISTRY}/${REPONAME}:archive-${stack}-${TAG_ECS}-${BUILDDATE} .
                  fi
              esac
            fi
          fi
        done
      fi